{
  "name": "kickbox",
  "version": "2.0.0",
  "description": "Official kickbox API library client for node.js",
  "author": {
    "name": "Chaitanya Surapaneni",
    "email": "chaitanya.surapaneni@kickbox.io",
    "url": "https://github.com/kickboxio"
  },
  "homepage": "http://kickbox.io",
  "keywords": [
    "free",
    "email",
    "validation",
    "kickbox",
    "service",
    "verification",
    "sendex"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/kickboxio/kickbox-node"
  },
  "main": "./lib/index.js",
  "dependencies": {
    "request": "2.x.x"
  },
  "bugs": {
    "url": "https://github.com/kickboxio/kickbox-node/issues"
  },
  "license": "MIT",
  "engines": {
    "node": ">= 0.8.0"
  },
  "readme": "<p align=\"center\">\n  <img src=\"https://static.kickbox.io/kickbox_github.png\" alt=\"Kickbox Email Verification Service\">\n  <br>\n</p>\n\n# Email Verification Library for Node.js\n\nKickbox determines if an email address is not only valid, but associated with a actual user. Uses include:\n\n* Preventing users from creating accounts on your applications using fake, misspelled, or throw-away email addresses.\n* Reducing bounces by removing old, invalid, and low quality email addresses from your mailing lists.\n* Saving money and projecting your reputation by only sending to real email users.\n\n## Getting Started\n\nTo begin, hop over to [kickbox.io](http://kickbox.io) and create a free account. Once you've signed up and logged in, click on **API Settings** and then click **Add API Key**. Take note of the generated API Key - you'll need it to setup the client as explained below.\n\n## Installation\n\nMake sure you have [npm](https://npmjs.org) installed.\n\n```bash\n$ npm install kickbox\n```\n\n#### Versions\n\nWorks with [ 0.8 / 0.9 / 0.10 / 0.11 ]\n\n## Usage\n\n```js\nvar kickbox = require('kickbox').client('Your_API_Key_Here').kickbox();\n\nkickbox.verify(\"test@example.com\", function (err, response) {\n  // Let's see some results\n  console.log(response.body);\n});\n```\n\n#### Options\n\n**timeout** `integer` (optional) - Maximum time, in milliseconds, for the API to complete a verification request. Default: 6000.\n\n```js\n// Example with options\nkickbox.verify(\"test@example.com\", {timeout: 6000}, function (err, response) {/*...*/});\n```\n\n### Response information\n\nA successful API call responds with the following values:\n\n- **result** `string` - The verification result: `valid`, `invalid`, `unknown`\n- **reason** `string` - The reason for the result. Possible reasons are:\n  - `invalid_email` - Specified email is not a valid email address syntax\n  - `invalid_domain` - Domain for email does not exist\n  - `rejected_email` - Email address was rejected by the SMTP server, email address does not exist\n  - `accepted_email` - Email address was accepted by the SMTP server\n  - `no_connect` - Could not connect to SMTP server\n  - `timeout` - SMTP session timed out\n  - `invalid_smtp` - SMTP server returned an unexpected/invalid response\n  - `unavailable_smtp` - SMTP server was unavailable to process our request\n  - `unexpected_error` - An unexpected error has occurred\n- **role**  `true | false` - *true* if the email address is a *role* address (`postmaster@example.com`, `support@example.com`, etc)\n- **free**  `true | false` - *true* if the email address uses a free email service like gmail.com or yahoo.com.\n- **disposable**  `true | false` - *true* if the email address uses a *disposable* domain like trashmail.com or mailinator.com.\n- **accept_all**  `true | false` - *true* if the email was accepted, but the domain appears to accept all emails addressed to that domain.\n- **did_you_mean** `null | string` - Returns a suggested email if a possible spelling error was detected. (`bill.lumbergh@gamil.com` -> `bill.lumbergh@gmail.com`)\n- **sendex** `float` - A *quality* score of the provided email address ranging between 0 (no quality) and 1 (perfect quality). More information on the Sendex Score can be found [here](http://help.kickbox.io/support/solutions/articles/4000017047-the-sendex-).\n- **email** `string` - Returns a normalized version of the provided email address. (`BoB@example.com` -> `bob@example.com`\n- **user** `string` - The user (a.k.a local part) of the provided email address. (`bob@example.com` -> `bob`)\n- **domain** `string` - The domain of the provided email address. (`bob@example.com` -> `example.com`)\n- **success** `true | false` - *true* if the API request was successful (i.e., no authentication or unexpected errors occured)\n\n## License\nMIT\n\n## Bug Reports\nReport [here](https://github.com/kickboxio/kickbox-node/issues).\n\n## Need Help?\nhelp@kickbox.io\n",
  "readmeFilename": "README.md",
  "_id": "kickbox@2.0.0",
  "dist": {
    "shasum": "76f192be35400d0ee5ce66b63cf86d62183261b7"
  },
  "_from": "kickbox@",
  "_resolved": "https://registry.npmjs.org/kickbox/-/kickbox-2.0.0.tgz"
}
